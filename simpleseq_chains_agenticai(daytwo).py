# -*- coding: utf-8 -*-
"""SimpleSeq Chains - AgenticAI(daytwo).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AFsgYgWofEufaBiSWNr9OBwlfWERrEV3

# **Building the Idea Generator & Refiner: Using different chains**
"""

!pip install -q langchain langchain-google-genai google-generativeai

from google.colab import userdata
import os
import time
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.prompts import ChatPromptTemplate
from langchain.chains import LLMChain
from langchain.chains import SimpleSequentialChain # Import SimpleSequentialChain

"""# **Load the Gemini API key**"""

# Load API Key and Initialize LLM
try:
    GOOGLE_API_KEY = userdata.get('GOOGLE_API_KEY')
    os.environ['GOOGLE_API_KEY'] = GOOGLE_API_KEY
    llm = ChatGoogleGenerativeAI(model="gemini-2.0-flash-lite", temperature=0.7) # Slightly higher temp for creativity
    print("API Key loaded and LLM initialized successfully.")
    setup_ok = True
except Exception as e:
    print(f"ERROR: Could not load API key or initialize LLM. {e}")
    print("Please ensure GOOGLE_API_KEY is set in Colab Secrets.")
    setup_ok = False

"""# **Defining the First Chain - Blog Post Idea Generator**

"""

# --- Chain 1: Blog Post Idea Generator ---
idea_prompt_template_text = """
You are an expert blog post idea generator.
Given the topic: "{topic}", generate a compelling and unique blog post idea. The idea should be concise, about 2 to 3 sentences.


Blog Post Idea:
"""
idea_prompt = ChatPromptTemplate.from_template(idea_prompt_template_text)
idea_chain = LLMChain(llm=llm, prompt=idea_prompt)
print("Blog Post Idea Chain created.")

"""# **Defining the Second Chain - Catchy Title Generator**"""

# --- Chain 2: Catchy Title Generator ---
title_prompt_template_text = """
You are an expert copywriter specializing in catchy blog post titles.
Based on the following blog post idea:
"{blog_post_idea}"
Please generate 3-5 catchy and click-worthy titles for this blog post.
Each title should be on a new line.
Catchy Titles:
"""
title_prompt = ChatPromptTemplate.from_template(title_prompt_template_text)
title_chain = LLMChain(llm=llm, prompt=title_prompt)
print("Catchy Title Chain created.")

"""# **Creating the `SimpleSequentialChain**"""

# --- Create the SimpleSequentialChain ---
overall_chain = SimpleSequentialChain(
    chains=[idea_chain, title_chain],
    verbose=True
)
print("Overall SimpleSequentialChain created.")

"""# **Running the Overall Chain**"""

# --- Run the Overall Chain ---
input_topic = "the impact of generative AI on education"
print(f"\nGenerating ideas and titles for topic: '{input_topic}'")


final_response = overall_chain.invoke(input_topic)
print("\n--- Final Output (Catchy Titles) ---")
print(final_response)

"""# **Introducing a DELAY in the Chain**"""

from langchain.chains import TransformChain

def delay_function(inputs):
        """This function pauses execution and then passes the input through."""
        print("\n--- Pausing for 5s to avoid rate limiting... ---")
        time.sleep(5)
        return inputs


delay_chain = TransformChain(
        input_variables=["blog_post_idea"],
        output_variables=["blog_post_idea"], # Ensure output name matches input
        transform=delay_function
)
print("Delay Chain created.")

"""# **Creating a Overall chain with the Chain1, Delay chain and Chain 2**"""

overall_chain = SimpleSequentialChain(
    chains=[idea_chain, delay_chain, title_chain],
    verbose=True
)


print("Overall SimpleSequentialChain created with a delay.")

"""# **Invoking the new chain with the delay**"""

# --- Run the Overall Chain ---
input_topic = "the impact of generative AI on education"
print(f"\nGenerating ideas and titles for topic: '{input_topic}'")


final_response = overall_chain.invoke(input_topic)
print("\n--- Final Output (Catchy Titles) ---")
print(final_response)